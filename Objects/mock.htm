<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mock.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mock.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Thu Aug 22 19:07:27 2024
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[85]">DefaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">DefaultISR</a><BR>
 <LI><a href="#[31]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[32]">ADC1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[59]">CAN0_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5b]">CAN0_ORed_0_15_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5c]">CAN0_ORed_16_31_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[58]">CAN0_ORed_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5a]">CAN0_Wake_Up_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[60]">CAN1_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[62]">CAN1_ORed_0_15_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5f]">CAN1_ORed_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[67]">CAN2_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[69]">CAN2_ORed_0_15_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[66]">CAN2_ORed_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[33]">CMP0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[14]">DMA10_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[15]">DMA11_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[16]">DMA12_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[17]">DMA13_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[18]">DMA14_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[19]">DMA15_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[e]">DMA4_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[f]">DMA5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[10]">DMA6_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[11]">DMA7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[12]">DMA8_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[13]">DMA9_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[85]">DefaultISR</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[37]">ERM_double_fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[36]">ERM_single_fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4f]">FLEXIO_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1f]">FTFC_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1c]">FTFC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6d]">FTM0_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6e]">FTM0_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6f]">FTM0_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[70]">FTM0_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[71]">FTM0_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[72]">FTM0_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[73]">FTM1_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[74]">FTM1_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[75]">FTM1_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[76]">FTM1_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[77]">FTM1_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[78]">FTM1_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[79]">FTM2_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7a]">FTM2_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7b]">FTM2_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7c]">FTM2_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7d]">FTM2_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7e]">FTM2_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7f]">FTM3_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[80]">FTM3_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[81]">FTM3_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[82]">FTM3_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[83]">FTM3_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[84]">FTM3_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[22]">LPI2C0_Master_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[23]">LPI2C0_Slave_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3a]">LPIT0_Ch0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3b]">LPIT0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3c]">LPIT0_Ch2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3d]">LPIT0_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[24]">LPSPI0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[25]">LPSPI1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[26]">LPSPI2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[29]">LPUART0_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2b]">LPUART1_RxTx_IRQHandler</a> from main.o(.text.LPUART1_RxTx_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2d]">LPUART2_RxTx_IRQHandler</a> from main.o(.text.LPUART2_RxTx_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4e]">PDB1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[21]">RCM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[38]">RTC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[39]">RTC_Seconds_IRQHandler</a> from main.o(.text.RTC_Seconds_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5e]">Reserved100_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[61]">Reserved103_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[63]">Reserved105_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[64]">Reserved106_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[65]">Reserved107_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[68]">Reserved110_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6a]">Reserved112_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6b]">Reserved113_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6c]">Reserved114_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[27]">Reserved45_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[28]">Reserved46_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2a]">Reserved48_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2c]">Reserved50_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2e]">Reserved52_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2f]">Reserved53_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[30]">Reserved54_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[34]">Reserved58_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[35]">Reserved59_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3f]">Reserved69_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[40]">Reserved70_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[42]">Reserved72_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4b]">Reserved81_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4c]">Reserved82_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4d]">Reserved83_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[52]">Reserved88_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[53]">Reserved89_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[54]">Reserved90_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[55]">Reserved91_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[56]">Reserved92_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[57]">Reserved93_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5d]">Reserved99_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[43]">SCG_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_s32k144.o(.text.SystemInit) referenced from startup_s32k144.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[88]">__main</a> from __main.o(!!!main) referenced from startup_s32k144.o(.text)
 <LI><a href="#[8b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[8a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[89]">_snputc</a> from _snputc.o(.text) referenced from snprintf.o(.text)
 <LI><a href="#[87]">init_data_bss</a> from startup.o(.text.init_data_bss) referenced from startup_s32k144.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[88]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12f]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[90]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[d1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[92]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[94]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[98]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[132]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[9a]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[a0]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a2]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a4]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a5]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a6]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[a8]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[133]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[aa]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ac]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ae]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[b0]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[134]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ba]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[137]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[138]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[139]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[13d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[140]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[141]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[142]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[143]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[144]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[146]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[147]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[148]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[149]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[152]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[b9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[153]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; search_finger_print &rArr; display_time &rArr; snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[154]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[df]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[be]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[155]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DefaultISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN0_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN0_ORed_16_31_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_ORed_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN1_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN1_ORed_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_ORed_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ERM_double_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ERM_single_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FLEXIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FTFC_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FTFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FTM0_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FTM0_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>FTM0_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>FTM0_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>FTM0_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>FTM0_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FTM1_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>FTM1_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>FTM1_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FTM1_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FTM1_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FTM1_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FTM2_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FTM2_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>FTM2_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FTM2_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FTM2_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FTM2_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FTM3_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>FTM3_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>FTM3_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>FTM3_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>FTM3_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>FTM3_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPI2C0_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPI2C0_Slave_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LPIT0_Ch0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPIT0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPIT0_Ch2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPIT0_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPUART0_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>PDB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Reserved103_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Reserved105_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Reserved106_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Reserved107_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Reserved110_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Reserved48_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Reserved50_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Reserved52_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Reserved58_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>Reserved69_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>Reserved72_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Reserved89_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>snprintf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
</UL>

<P><STRONG><a name="[e5]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_RxTx_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[c6]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[c7]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c8]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[91]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[c3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>

<P><STRONG><a name="[89]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> snprintf.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[a3]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[ce]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9f]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[a7]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[cf]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a1]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a9]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[93]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[ca]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[cd]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[db]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ab]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ad]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[dc]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[af]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[b1]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[dd]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[cc]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[de]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[b5]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d9]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d3]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bd]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12d]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[156]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[109]"></a>GPIO_ResetOutputPin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio.o(.text.GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
</UL>

<P><STRONG><a name="[108]"></a>GPIO_SetOutputPin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio.o(.text.GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
</UL>

<P><STRONG><a name="[f1]"></a>Gpio_Init</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, gpio.o(.text.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC15
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC11
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC10
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC9
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD15
</UL>

<P><STRONG><a name="[e0]"></a>LPI2C0_write</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, i2c.o(.text.LPI2C0_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_start_ACK
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
</UL>

<P><STRONG><a name="[2b]"></a>LPUART1_RxTx_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, main.o(.text.LPUART1_RxTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LPUART1_RxTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPUART2_RxTx_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, main.o(.text.LPUART2_RxTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART2_RxTx_IRQHandler &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>LPUART_config_baud57600</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, lpuart.o(.text.LPUART_config_baud57600))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LPUART_config_baud57600
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lpuart
</UL>

<P><STRONG><a name="[e7]"></a>LPUART_send_byte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lpuart.o(.text.LPUART_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPDeleteAllFinger
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStoreFinger
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateTemplate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPSearchFinger
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPGetImage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[e6]"></a>LPUART_send_string</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lpuart.o(.text.LPUART_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPUART_send_string &rArr; LPUART_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[119]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, nvic.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nvic
</UL>

<P><STRONG><a name="[115]"></a>NormalRUNmode_80MHz</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, clock.o(.text.NormalRUNmode_80MHz))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock
</UL>

<P><STRONG><a name="[11b]"></a>PCC_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, pcc.o(.text.PCC_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PCC_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pcc
</UL>

<P><STRONG><a name="[11c]"></a>PCC_SetClockSource</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pcc.o(.text.PCC_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCC_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pcc
</UL>

<P><STRONG><a name="[ec]"></a>Port_Init</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, port_1.o(.text.Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC15
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC11
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC10
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC9
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD15
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD7
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD6
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configA3
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configA2
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configC7
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configC6
</UL>

<P><STRONG><a name="[39]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, main.o(.text.RTC_Seconds_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>RTC_init</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, rtc.o(.text.RTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>SOSC_init_8MHz</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, clock.o(.text.SOSC_init_8MHz))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock
</UL>

<P><STRONG><a name="[114]"></a>SPLL_init_160MHz</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, clock.o(.text.SPLL_init_160MHz))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock
</UL>

<P><STRONG><a name="[e8]"></a>SendStoreFinger</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, lpuart.o(.text.SendStoreFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendStoreFinger &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[fe]"></a>SysTick_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text.SysTick_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[fd]"></a>SysTick_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, systick.o(.text.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
</UL>

<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_s32k144.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>bus_busy</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, i2c.o(.text.bus_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_write
</UL>

<P><STRONG><a name="[104]"></a>check_but</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(.text.check_but))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_but
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>

<P><STRONG><a name="[106]"></a>check_col</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(.text.check_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_col
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>

<P><STRONG><a name="[eb]"></a>configA2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.configA2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = configA2 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[ed]"></a>configA3</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.configA3))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = configA3 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[ee]"></a>configC6</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.configC6))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = configC6 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[ef]"></a>configC7</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.configC7))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = configC7 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f0]"></a>configD1</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text.configD1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = configD1 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f2]"></a>configD15</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.configD15))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = configD15 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f3]"></a>configD6</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.configD6))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = configD6 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f4]"></a>configD7</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.configD7))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = configD7 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f5]"></a>config_PTC1</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC1 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f6]"></a>config_PTC10</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC10 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f7]"></a>config_PTC11</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC11))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC11 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f8]"></a>config_PTC15</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC15))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC15 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[f9]"></a>config_PTC16</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC16 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[fa]"></a>config_PTC2</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC2 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[fb]"></a>config_PTC8</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC8 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[fc]"></a>config_PTC9</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text.config_PTC9))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_PTC9 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
</UL>

<P><STRONG><a name="[ea]"></a>delay</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, systick.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Disable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPDeleteAllFinger
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStoreFinger
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateTemplate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPSearchFinger
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPGetImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>display_time</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, main.o(.text.display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = display_time &rArr; snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_string
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_rtc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
</UL>

<P><STRONG><a name="[e2]"></a>generate_start_ACK</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, i2c.o(.text.generate_start_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = generate_start_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_write
</UL>

<P><STRONG><a name="[e4]"></a>generate_stop</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, i2c.o(.text.generate_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = generate_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_write
</UL>

<P><STRONG><a name="[103]"></a>get_key</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(.text.get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_key &rArr; check_col
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_col
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_row
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_but
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
</UL>

<P><STRONG><a name="[107]"></a>handle_keytap</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, main.o(.text.handle_keytap))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handle_keytap &rArr; keytap_number_mode &rArr; sendFPDeleteAllFinger &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetOutputPin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutputPin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>import_finger_print</STRONG> (Thumb, 780 bytes, Stack size 64 bytes, main.o(.text.import_finger_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = import_finger_print &rArr; SendStoreFinger &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStoreFinger
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateTemplate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPGetImage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>init_LPI2C0</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, i2c.o(.text.init_LPI2C0))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>init_clock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.init_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalRUNmode_80MHz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPLL_init_160MHz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOSC_init_8MHz
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>init_data_bss</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, startup.o(.text.init_data_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_data_bss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>init_flash</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(.text.init_flash))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>init_lpuart</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text.init_lpuart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_lpuart &rArr; LPUART_config_baud57600
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_config_baud57600
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>init_nvic</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text.init_nvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_nvic &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>init_pcc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(.text.init_pcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_pcc &rArr; PCC_SetClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_SetClockSource
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>init_pinout</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text.init_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = init_pinout &rArr; configD1 &rArr; Port_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC15
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC11
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC10
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC9
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_PTC8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD15
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD7
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configD6
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configA3
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configA2
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configC7
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configC6
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>init_systick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.init_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_systick &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>keytap_character_mode</STRONG> (Thumb, 2792 bytes, Stack size 24 bytes, main.o(.text.keytap_character_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = keytap_character_mode &rArr; lcd_send_string &rArr; lcd_send_data &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_but
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_string
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
</UL>

<P><STRONG><a name="[10a]"></a>keytap_number_mode</STRONG> (Thumb, 1050 bytes, Stack size 32 bytes, main.o(.text.keytap_number_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = keytap_number_mode &rArr; sendFPDeleteAllFinger &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPDeleteAllFinger
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_string
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
</UL>

<P><STRONG><a name="[10c]"></a>lcd_clear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c.o(.text.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_clear &rArr; lcd_send_data &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>lcd_clear_rtc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c.o(.text.lcd_clear_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_clear_rtc &rArr; lcd_send_data &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
</UL>

<P><STRONG><a name="[122]"></a>lcd_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, i2c.o(.text.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcd_init &rArr; lcd_send_cmd &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>lcd_put_cur</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i2c.o(.text.lcd_put_cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_put_cur &rArr; lcd_send_cmd &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>lcd_send_cmd</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, i2c.o(.text.lcd_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_send_cmd &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_rtc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[121]"></a>lcd_send_data</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, i2c.o(.text.lcd_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_send_data &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_write
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_string
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_rtc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[102]"></a>lcd_send_string</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i2c.o(.text.lcd_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_send_string &rArr; lcd_send_data &rArr; LPI2C0_write &rArr; generate_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_character_mode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
</UL>

<P><STRONG><a name="[bc]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; search_finger_print &rArr; display_time &rArr; snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_keytap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nvic
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LPI2C0
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lpuart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pinout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pcc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[105]"></a>scan_row</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, main.o(.text.scan_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = scan_row
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>

<P><STRONG><a name="[126]"></a>search_finger_print</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, main.o(.text.search_finger_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = search_finger_print &rArr; display_time &rArr; snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetOutputPin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPSearchFinger
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPGetImage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutputPin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_string
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_send_string
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_time
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_put_cur
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>sendFPCreateCharFile1</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lpuart.o(.text.sendFPCreateCharFile1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendFPCreateCharFile1 &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[110]"></a>sendFPCreateCharFile2</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lpuart.o(.text.sendFPCreateCharFile2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendFPCreateCharFile2 &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[111]"></a>sendFPCreateTemplate</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lpuart.o(.text.sendFPCreateTemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendFPCreateTemplate &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[120]"></a>sendFPDeleteAllFinger</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lpuart.o(.text.sendFPDeleteAllFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendFPDeleteAllFinger &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keytap_number_mode
</UL>

<P><STRONG><a name="[10e]"></a>sendFPGetImage</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lpuart.o(.text.sendFPGetImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendFPGetImage &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;import_finger_print
</UL>

<P><STRONG><a name="[e9]"></a>sendFPHeader</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lpuart.o(.text.sendFPHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendFPHeader &rArr; LPUART_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPDeleteAllFinger
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStoreFinger
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateTemplate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPSearchFinger
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPCreateCharFile1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPGetImage
</UL>

<P><STRONG><a name="[127]"></a>sendFPSearchFinger</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lpuart.o(.text.sendFPSearchFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sendFPSearchFinger &rArr; delay &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFPHeader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_finger_print
</UL>

<P><STRONG><a name="[e3]"></a>transmit_data</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, i2c.o(.text.transmit_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = transmit_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_write
</UL>

<P><STRONG><a name="[d4]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[129]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[128]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[12a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[12b]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d5]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[d8]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b8]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[8b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[159]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[15a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[95]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[99]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
